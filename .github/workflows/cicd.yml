name: CI-CD

on: 
  push:
    branches:
      - develop
    paths-ignore:
      - '**/README.md'

jobs:
  telegram-notify-start:
    name: Telegram Notify Start
    runs-on: ubuntu-latest
    steps:
    - run: |
        echo "COMMIT_MESSAGES<<EOF" >> $GITHUB_ENV

        JOINED_COMMITS="$(echo '${{ join(github.event.commits.*.message, '\n\n') }}')"

        echo "$JOINED_COMMITS" >> $GITHUB_ENV
         
        echo "EOF" >> $GITHUB_ENV
      shell: sh
    - name: Telegram Notify
      uses: appleboy/telegram-action@master
      env:
        COMMIT_MESSAGES: ${{ env.COMMIT_MESSAGES }}
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        disable_notification: true
        format: markdown
        message: |
          ♻️ Started ${{ github.repository }} - *${{ github.workflow }} #${{ github.run_number }}*

          ${{ env.COMMIT_MESSAGES }}
          
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: Authenticate with PAT
      run: echo "${{ secrets.GH_TOKEN }}" | gh auth login --with-token
    - uses: actions/checkout@v3
    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v2.9.1
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        file: cicd/Dockerfile
        platforms: linux/arm64/v8
        push: true
        tags: |
          ${{ vars.DOCKER_REPO }}:latest
          ${{ vars.DOCKER_REPO }}:${{ github.sha }}
        build-args:
          NODE_ENV=${{ vars.NODE_ENV }}
          PORT=${{ vars.PORT }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Kubernetes Set Context
        uses: Azure/k8s-set-context@v3.1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}
      - name: Create Namespace
        run: >
          kubectl create namespace unixpense
          -o yaml --dry-run=client | kubectl apply -f -
      - name: Create Configuration ConfigMap
        run: >
          kubectl create configmap unixpense-svc-config
          --namespace=unixpense
          --from-literal=PORT=${{ vars.PORT }}
          --from-literal=NODE_ENV=${{ vars.NODE_ENV }}
          --from-literal=LOG_LEVEL=${{ vars.LOG_LEVEL }}
          --from-literal=UNIXPENSE_HOST=${{ vars.UNIXPENSE_HOST }}
          --from-literal=UNIXPENSE_HOST_PREFIX=${{ vars.UNIXPENSE_HOST_PREFIX }}
          --from-literal=LOKI_HOST=${{ vars.LOKI_HOST }}
          --from-literal=VERSION=${{ github.sha }}
          -o yaml --dry-run=client | kubectl apply -f -
      - name: Create OAuth2 Configuration ConfigMap
        run: >
          kubectl create configmap oauth2-authenticated-emails
          --namespace unixpense
          --from-literal=authenticated-emails=${{ vars.GMAIL_ADDRESS }}
          -o yaml --dry-run=client | kubectl apply -f -
      - name: Create Refresh Script ConfigMap
        run: >
          kubectl create configmap refresh-sh
          --namespace unixpense
          --from-file=sh/refresh.sh
          -o yaml --dry-run=client | kubectl apply -f -
      - name: Create MariaDb Secret
        uses: Azure/k8s-create-secret@v4
        with:
          namespace: 'unixpense'
          secret-type: 'generic'
          secret-name: mariadb-secret
          string-data: |
            {
              "MARIADB_HOST": "${{ secrets.MARIADB_HOST }}",
              "MARIADB_PORT": "${{ secrets.MARIADB_PORT }}",
              "MARIADB_USER": "${{ secrets.MARIADB_USER }}",
              "MARIADB_PASSWORD": "${{ secrets.MARIADB_PASSWORD }}",
              "MARIADB_DATABASE": "${{ vars.MARIADB_DATABASE }}",
              "MARIADB_RANDOM_ROOT_PASSWORD": "yes"
            }
      - name: Create Google OAuth2 Credentials Secret
        uses: Azure/k8s-create-secret@v4
        with:
          namespace: 'unixpense'
          secret-type: 'generic'
          secret-name: google-cred
          string-data: |
            {
              "GOOGLE_OAUTH2_CLIENT_ID": "${{ secrets.GOOGLE_OAUTH2_CLIENT_ID }}",
              "GOOGLE_OAUTH2_CLIENT_SECRET": "${{ secrets.GOOGLE_OAUTH2_CLIENT_SECRET }}"
            }
      - name: Create OAuth2 Cookie Secret
        uses: Azure/k8s-create-secret@v4
        with:
          namespace: 'unixpense'
          secret-type: 'generic'
          secret-name: oauth2-cookie-secret
          string-data: |
            {
              "cookie-secret": "${{ secrets.OAUTH2_PROXY_COOKIE_SECRET }}"
            }
      - name: Create Telegram Secret
        uses: Azure/k8s-create-secret@v4
        with:
          namespace: 'unixpense'
          secret-type: 'generic'
          secret-name: telegram-secret
          string-data: |
            {
              "TELEGRAM_BOT_TOKEN": "${{ secrets.TELEGRAM_BOT_TOKEN }}",
              "TELEGRAM_CHAT_ID": "${{ secrets.TELEGRAM_CHAT_ID }}"
            }
      - name: Deploy to Kubernetes Cluster
        uses: swdotcom/update-and-apply-kubernetes-configs@v1
        with:
          k8-config-file-paths: |
            cicd/manifests/redis-config.yaml
            cicd/manifests/redis-persistence.yaml
            cicd/manifests/auth-deployment.yaml
            cicd/manifests/auth-network.yaml
            cicd/manifests/mariadb-persistence.yaml
            cicd/manifests/mariadb-deployment.yaml
            cicd/manifests/mariadb-service.yaml
            cicd/manifests/deployment.yaml
            cicd/manifests/service.yaml
            cicd/manifests/ingress.yaml
            cicd/manifests/cronjob.yaml
          replacement-method: defined
        env:
          latest: ${{ github.sha }}
          PORT: ${{ vars.PORT }}
          REDIS_NFS_SERVER: ${{ vars.REDIS_NFS_SERVER }}
          REDIS_NFS_PATH: ${{ vars.REDIS_NFS_PATH }}
          UNIXPENSE_HOST: ${{ vars.UNIXPENSE_HOST }}
          UNIXPENSE_HOST_PREFIX: ${{ vars.UNIXPENSE_HOST_PREFIX }}
          MARIADB_NFS_SERVER: ${{ vars.MARIADB_NFS_SERVER }}
          MARIADB_NFS_PATH: ${{ vars.MARIADB_NFS_PATH }}
          CRONTAB: ${{ vars.CRONTAB }}

  telegram-notify-end:
    name: Telegram Notify End
    if: always()
    needs: [ build, deploy ]
    runs-on: ubuntu-latest
    steps:
    - run: |
        if [ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]; then
          exit 0
        fi

        if [ "${{ contains(needs.*.result, 'failure') }}" == "true" ]; then
          echo RESULT_MESSAGE="❌ *${{ github.repository }} ${{ github.workflow }} #${{ github.run_number }} was unsuccessful*" >> $GITHUB_ENV

          exit 0
        fi

        echo RESULT_MESSAGE="✅ *${{ github.repository }} ${{ github.workflow }} #${{ github.run_number }} was successful*" >> $GITHUB_ENV
    - name: Telegram Notify
      uses: appleboy/telegram-action@master
      if: env.RESULT_MESSAGE != ''
      env:
        RESULT_MESSAGE: ${{ env.RESULT_MESSAGE }}
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        disable_notification: true
        format: markdown
        message: ${{ env.RESULT_MESSAGE }}