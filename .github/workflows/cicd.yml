name: CI-CD

on: 
  push

jobs:

  telegram-notify-start:
    name: Telegram Notify Start
    runs-on: ubuntu-latest
    
    steps:
    - name: Telegram Notify
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          Started ${{ github.repository }} ${{ github.workflow }} #${{ github.run_number }}

  pre-build:
    name: Pre-build
    needs: telegram-notify-start
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Install
      run: npm ci

    - name: Lint
      run: npm run lint

    - name: Test
      run: npm run test

  build:
    name: Build
    if: github.ref == 'refs/heads/develop'
    needs: pre-build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v2.5.0

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        file: cicd/Dockerfile
        platforms: linux/arm64/v8
        push: true
        tags: |
          ${{ vars.DOCKER_REPO }}:latest
          ${{ vars.DOCKER_REPO }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy
    if: github.ref == 'refs/heads/develop'
    needs: [ pre-build, build ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Kubernetes Set Context
        uses: Azure/k8s-set-context@v3.0
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Create MariaDb Kubernetes Secret
        uses: Azure/k8s-create-secret@v4
        with:
          namespace: 'unixpense'
          secret-type: 'generic'
          secret-name: mariadb-secret
          string-data: |
            {
              "MARIADB_USER": "${{ secrets.MARIADB_USER }}",
              "MARIADB_PASSWORD": "${{ secrets.MARIADB_PASSWORD }}",
              "MARIADB_DATABASE": "${{ vars.MARIADB_DATABASE }}",
              "MARIADB_NFS_SERVER": "${{ vars.MARIADB_NFS_SERVER }}",
              "MARIADB_NFS_PATH": "${{ vars.MARIADB_NFS_PATH }}",
              "MARIADB_RANDOM_ROOT_PASSWORD": "yes"
            }

      - name: Create Google OAuth2 Credentials Kubernetes Secret
        uses: Azure/k8s-create-secret@v4
        with:
          namespace: 'unixpense'
          secret-type: 'generic'
          secret-name: google-cred
          string-data: |
            {
              "GOOGLE_OAUTH2_CLIENT_ID": "${{ secrets.GOOGLE_OAUTH2_CLIENT_ID }}",
              "GOOGLE_OAUTH2_CLIENT_SECRET": "${{ secrets.GOOGLE_OAUTH2_CLIENT_SECRET }}"
            }

      - name: Create OAuth2 Kubernetes Secret
        uses: Azure/k8s-create-secret@v4
        with:
          namespace: 'unixpense'
          secret-type: 'generic'
          secret-name: oauth2-cookie-secret
          string-data: |
            {
              "cookie-secret": "${{ secrets.OAUTH2_PROXY_COOKIE_SECRET }}"
            }

      - name: Create Telegram Kubernetes Secret
        uses: Azure/k8s-create-secret@v4
        with:
          namespace: 'unixpense'
          secret-type: 'generic'
          secret-name: telegram-secret
          string-data: |
            {
              "TELEGRAM_BOT_TOKEN": "${{ secrets.TELEGRAM_BOT_TOKEN }}",
              "TELEGRAM_CHAT_ID": "${{ secrets.TELEGRAM_CHAT_ID }}"
            }

      - name: Create Refresh Script Kubernetes ConfigMap
        run: kubectl create configmap refresh-sh --namespace unixpense --from-file=sh/refresh.sh -o yaml --dry-run=client | kubectl apply -f -

      - name: Deploy to Kubernetes Cluster
        uses: swdotcom/update-and-apply-kubernetes-configs@v1
        with:
          k8-config-file-paths: |
            cicd/manifests/redis-config.yaml
            cicd/manifests/redis-persistence.yaml
            cicd/manifests/auth-config.yaml
            cicd/manifests/auth-deployment.yaml
            cicd/manifests/auth-network.yaml
            cicd/manifests/config.yaml
            cicd/manifests/mariadb-persistence.yaml
            cicd/manifests/mariadb-service.yaml
            cicd/manifests/deployment.yaml
            cicd/manifests/service.yaml
            cicd/manifests/ingress.yaml
            cicd/manifests/cronjob.yaml
          replacement-method: defined
        env:
          latest: ${{ github.sha }}
          PORT: ${{ vars.PORT }}
          NODE_ENV: ${{ vars.NODE_ENV }}
          LOG_LEVEL: ${{ vars.LOG_LEVEL }}
          GMAIL_ADDRESS: ${{ vars.GMAIL_ADDRESS }}
          REDIS_NFS_SERVER: ${{ vars.REDIS_NFS_SERVER }}
          REDIS_NFS_PATH: ${{ vars.REDIS_NFS_PATH }}
          UNIXPENSE_HOST: ${{ vars.UNIXPENSE_HOST }}
          UNIXPENSE_HOST_PREFIX: ${{ vars.UNIXPENSE_HOST_PREFIX }}
          LOKI_HOST: ${{ vars.LOKI_HOST }}
          MARIADB_NFS_SERVER: ${{ vars.MARIADB_NFS_SERVER }}
          MARIADB_NFS_PATH: ${{ vars.MARIADB_NFS_PATH }}
          CRONTAB: ${{ vars.CRONTAB }}
  
  telegram-notify-success:
    name: Telegram Notify Success
    if: success()
    needs: [ pre-build, build, deploy ]
    runs-on: ubuntu-latest
    
    steps:
    - name: Telegram Notify
      if: success()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          ✅ ${{ github.repository }} ${{ github.workflow }} #${{ github.run_number }} was successful
    
  telegram-notify-failed:
    name: Telegram Notify Failed
    if: ${{ always() && contains(needs.*.result, 'failure') }}
    needs: [ pre-build, build, deploy ]
    runs-on: ubuntu-latest

    steps:
    - name: Telegram Notify
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          ❌ ${{ github.repository }} ${{ github.workflow }} #${{ github.run_number }} was unsuccessful