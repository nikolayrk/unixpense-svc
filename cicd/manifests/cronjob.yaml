apiVersion: batch/v1
kind: CronJob
metadata:
  name: unixpense-cron
  namespace: unixpense
spec:
  schedule: "$CRONTAB"
  successfulJobsHistoryLimit: 0
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 5
      template:
        spec:
          restartPolicy: Never
          containers:
          - name: mariadb-client
            image: mariadb:latest
            env:
            - name: MARIADB_USER
              valueFrom:
                secretKeyRef:
                  name: mariadb-secret
                  key: MARIADB_USER
            - name: MARIADB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mariadb-secret
                  key: MARIADB_PASSWORD
            envFrom:
            - secretRef:
                name: telegram-secret
            command:
            - /bin/sh
            - -ec
            - |
              apt-get -qy update; apt-get -qy -o=Dpkg::Use-Pty=0 install curl jq

              UNIXPENSE_API_URL=http://unixpense-svc-service.unixpense.svc.cluster.local:8000/api
              FETCH_TRANSACTION_IDS_URL="$UNIXPENSE_API_URL/transactions/gmail/ids/last/20?skip_saved=true&skip_depth=10"
              SAVE_TRANSACTIONS_URL="$UNIXPENSE_API_URL/transactions/gmail/save"

              echo -n "- Resolving OAuth2 Access Token... "

              ACCESS_TOKEN_QUERY="\
                SELECT access_token
                FROM google_oauth2_tokens
                WHERE user_email='$GMAIL_ADDRESS'"

              ACCESS_TOKEN=$(mariadb unixpense \
                -h mariadb-service.unixpense.svc.cluster.local \
                -u$MARIADB_USER \
                -p$MARIADB_PASSWORD \
                -se "$ACCESS_TOKEN_QUERY")

              echo $ACCESS_TOKEN

              echo -n "- Fetching new transaction IDs... "

              TRANSACTION_IDS=$(curl -s \
                -X GET "$FETCH_TRANSACTION_IDS_URL" \
                -H "Authorization: Bearer $ACCESS_TOKEN" \
                -H "Accept: application/json")

              TRANSACTION_ID_COUNT=$(echo $TRANSACTION_IDS | jq 'length')

              if [ "$TRANSACTION_ID_COUNT" -eq "0" ]; then
                echo No new transactions.

                exit
              fi

              echo "Received $TRANSACTION_ID_COUNT new transaction(s)."

              echo -n "- Saving new transaction IDs... "

              RESULT=$(curl -s \
                -X POST "$SAVE_TRANSACTIONS_URL" \
                -H "Authorization: Bearer $ACCESS_TOKEN" \
                -H "Accept: application/json" \
                -H "Content-Type: application/json" \
                -d $TRANSACTION_IDS)

              RESULT_MESSAGE=$(echo $RESULT | jq '.message')
              RESULT_ERROR=$(echo $RESULT | jq '.error')
              TELEGRAM_MESSAGE=""

              if [ "$RESULT_MESSAGE" != null ]; then
                echo Success: $RESULT_MESSAGE

                TELEGRAM_MESSAGE=$RESULT_MESSAGE
              elif [ "$RESULT_ERROR" != null ]; then
                echo Failed: $RESULT_ERROR

                TELEGRAM_MESSAGE=$RESULT_ERROR
              else
                echo Unexpected result: $RESULT

                TELEGRAM_MESSAGE=$RESULT
              fi

              echo -n "- Sending result to Telegram... "

              TELEGRAM_API_RESULT=$(curl -s \
                -X POST https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage \
                -H 'Content-Type: application/json' \
                -d "{\"chat_id\": \"$TELEGRAM_CHAT_ID\", \"text\": $TELEGRAM_MESSAGE, \"disable_notification\": true}")

              TELEGRAM_API_SUCCESSFUL=$(echo $TELEGRAM_API_RESULT | jq '.ok')

              if [ "$TELEGRAM_API_RESULT" -eq "false" ]; then
                TELEGRAM_API_ERROR_DESCRIPTION=$(echo $TELEGRAM_API_RESULT | jq '.description')

                echo "Failed: $TELEGRAM_API_ERROR_DESCRIPTION"

                exit
              fi

              echo Success